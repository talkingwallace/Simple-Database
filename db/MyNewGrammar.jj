/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options
{
  static = true;
  IGNORE_CASE = true;
}

PARSER_BEGIN(MyNewGrammar)
package sql;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONObject;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();

/*@egen*/
  public static void main(String args [])
  {
    MyNewGrammar t = new MyNewGrammar(System.in);
    System.out.println("please input sql sentences");
    while(true){
	try
    {
      System.out.print(">>");
      SimpleNode node = t.Start();
      new SemanticReader(node);
      t.ReInit(System.in);
    }
    catch (Exception e)
    {
      System.out.println(e.getMessage());
      t.ReInit(System.in);
    }
    }
  }


  public static void combineConditions(CSet set,Object a,Object b){
	    set.put(a);
	    set.put(b);
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN: {
	//\u7efe\ufe3d\u6f6b\u934f\u62bd\u656d\u7487\ufffd
	< P_KEY : "PRIMARY KEY" >|
	< UNIQUE : "UNIQUE" >|
	< CHECK :"CHECK" >
}

TOKEN://\u93bf\u5d84\u7d94\u934f\u62bd\u656d\u7487\ufffd
{
	< USE:"USE" >
	| 
	< SHOW:"SHOW" >
	| 
	< SELECT : "SELECT" >
	|
	< DROP:"DROP" >
	|
	< EXIT:"EXIT" >
	|
	< FROM : "FROM" >
	|
	< WHERE:"WHERE" >
	|
	< CREATE:"CREATE" >
	|
	< INSERT:"INSERT" >
	|
	< INTO:"INTO" >
	|
	< DELETE : "DELETE" >
	|
	< UPDATE : "UPDATE" >
	|
	< SET : "SET" >
	|
	< AND :"AND"|"&" >
	|
	< OR :"OR" | "|" >
	|
	< AS :"AS" > 
}

TOKEN: //\u6dc7\u6fc8\u6680\u701b\ufffd id
{	
	< KW_TABLE : "TABLE">
	|
	< KW_DATABASE:"DATABASE" >
	|
	< KW_VIEW : "VIEW" >
	| 
	< STAR :"*" >
	|
	< VALUES:"values" >
	| 
	//\u7eeb\u8bf2\u7037\u934f\u62bd\u656d\u7487\ufffd
	< KW_BOOL:"BOOL" >|
	< KW_STR :"STRING" >|
	< KW_INT :"INT" >|
	//\u7eeb\u8bf2\u7037
	< NUM:(["0"-"9"])+ >
	|	
	< STR: "'" (~["'"])* "'" > //\u951b\u4f8a\u7d12\u93c6\u5099\u7b09\u93c0\ue21b\u5bd4\u6d93\ue15f\u6783 \u9a9e\u6735\u7b16\u93c3\u72b3\u7876\u9477\ue044\u59e9\u675e\ue0ff\u7b9f \u951b\u4f8a\u7d12
	|
	< BOOL : "true"|"false" >
	| 
	< ID:(["A"-"Z","a"-"z","_"])(["0"-"9","A"-"Z","a"-"z","_"])* >
}

/** Root production. */

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Statement() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement():
{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Statement */
   try {
/*@egen*/
   Use()
  |Show()  
  |Create()
  |Exit()
  |Drop()
  |Select()
  |Insert()
  |Delete()
  |Update()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
//-----\u95ab\ufffd\u9351\ufffd----------
void Exit():
{/*@bgen(jjtree) Exit */
  SimpleNode jjtn000 = new SimpleNode(JJTEXIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Exit */
  try {
/*@egen*/
  < EXIT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//-----\u6d63\u8de8\u6564\u93c1\u7248\u5d41\u6434\ufffd-----
void Use():
{/*@bgen(jjtree) Use */
  SimpleNode jjtn000 = new SimpleNode(JJTUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Use */
  try {
/*@egen*/
  < USE > DB()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//-------\u705e\u66e0\u305a\u741b\ufffd------
void Show(): {/*@bgen(jjtree) Show */
  SimpleNode jjtn000 = new SimpleNode(JJTSHOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Show */
  try {
/*@egen*/
  < SHOW > < KW_TABLE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*--------------------------------------------------------*/
//---------\u7eeb\u8bf2\u7037------------

void Type(): {/*@bgen(jjtree) Type */
              SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  (t=< KW_INT >|t=< KW_BOOL >|t=< KW_STR >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Table(): {/*@bgen(jjtree) Table */
               SimpleNode jjtn000 = new SimpleNode(JJTTABLE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) Table */
  try {
/*@egen*/
  t = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Tables(): {/*@bgen(jjtree) Tables */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Tables */
        try {
/*@egen*/
	Table() ["," Tables()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String Table_Column(): {/*@bgen(jjtree) Table_Column */
                        SimpleNode jjtn000 = new SimpleNode(JJTTABLE_COLUMN);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t,s=null;}
{/*@bgen(jjtree) Table_Column */
  try {
/*@egen*/
  t=< ID > ["." s=< ID >]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    String result="";
    result += t.image;
    if(s!=null) {result+="."+s.image;}
    jjtn000.setName(result);
    return result;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Column(): {/*@bgen(jjtree) Column */
                SimpleNode jjtn000 = new SimpleNode(JJTCOLUMN);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) Column */
  try {
/*@egen*/
  t = < ID >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void DB(): {/*@bgen(jjtree) DB */
            SimpleNode jjtn000 = new SimpleNode(JJTDB);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DB */
  try {
/*@egen*/
  t= < ID >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//--------------\u7039\u6c2b\u7b9f-----------
void P_Key(): {/*@bgen(jjtree) P_Key */
  SimpleNode jjtn000 = new SimpleNode(JJTP_KEY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) P_Key */
  try {
/*@egen*/
  < P_KEY >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Check(): {/*@bgen(jjtree) Check */
  SimpleNode jjtn000 = new SimpleNode(JJTCHECK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Check */
  try {
/*@egen*/
  < CHECK > operator() rightComp()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setName("check");}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Unique(): {/*@bgen(jjtree) Unique */
  SimpleNode jjtn000 = new SimpleNode(JJTUNIQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Unique */
 try {
/*@egen*/
 < UNIQUE >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { jjtn000.setName("unqiue");}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void Constraint(): {/*@bgen(jjtree) Constraint */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTRAINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Constraint */
  try {
/*@egen*/
  Unique()|Check()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Definition(): {/*@bgen(jjtree) Definition */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Definition */
  try {
/*@egen*/
  Column() Type() [P_Key()|Check()|Unique()] _Definition()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//\u5a11\u5825\u6ace\u5bb8\ufe42\ufffd\u6391\u7d8a
void _Definition(): {/*@bgen(jjtree) _Definition */
  SimpleNode jjtn000 = new SimpleNode(JJT_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) _Definition */
  try {
/*@egen*/
  ["," Column()  Type() [Check()|Unique()] _Definition()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//-------------------\u7459\u55d7\u6d58-----------------
void View(): {/*@bgen(jjtree) View */
  SimpleNode jjtn000 = new SimpleNode(JJTVIEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) View */
  try {
/*@egen*/
  < KW_VIEW > Table() < AS > Select()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//-----------------\u9352\u6d98\u7f13\u7487\ue15e\u5f5e-------------
void Create(): {/*@bgen(jjtree) Create */
  SimpleNode jjtn000 = new SimpleNode(JJTCREATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Create */
  try {
/*@egen*/
  < CREATE > (< KW_TABLE > Table() "(" Definition() ")"|< KW_DATABASE> DB() | View() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*--------------------------------------------------------*/
//---------------\u95ab\u590b\u5ae8\u9429\ue1bd\u7223-----------
void Star_All(): {/*@bgen(jjtree) Star_All */
                   SimpleNode jjtn000 = new SimpleNode(JJTSTAR_ALL);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Star_All */
  try {
/*@egen*/
  t=< STAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Target(): {/*@bgen(jjtree) Target */
  SimpleNode jjtn000 = new SimpleNode(JJTTARGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Target */
  try {
/*@egen*/
  Star_All()| Table_Column() TargetFollow()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TargetFollow(): {/*@bgen(jjtree) TargetFollow */
  SimpleNode jjtn000 = new SimpleNode(JJTTARGETFOLLOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) TargetFollow */
  try {
/*@egen*/
  [","Table_Column() TargetFollow()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//----------------\u95ab\u590b\u5ae8\u951b\u5c7d\u57b9\u95c4\u308f\u7d1d\u6dc7\ue1bd\u657c\u93c9\u2032\u6b22 \u5bee\u66e0\u6564Level1---------------

String leftComp(): {/*@bgen(jjtree) leftComp */
                    SimpleNode jjtn000 = new SimpleNode(JJTLEFTCOMP);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/String t="";}
{/*@bgen(jjtree) leftComp */
  try {
/*@egen*/
  t = Table_Column()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String rightComp(): {/*@bgen(jjtree) rightComp */
                     SimpleNode jjtn000 = new SimpleNode(JJTRIGHTCOMP);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/String value;}
{/*@bgen(jjtree) rightComp */
   try {
/*@egen*/
   value = String()/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { return value.replaceAll("'","");}
  |value = Num()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { return value;}
  |value = Bool()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{ return value;}
  |value = Table_Column()/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { return value;}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

String operator(): {/*@bgen(jjtree) operator */
                    SimpleNode jjtn000 = new SimpleNode(JJTOPERATOR);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token op; }
{/*@bgen(jjtree) operator */
  try {
/*@egen*/
  (op = "<"|op = ">"|op = ">="|op = "<="|op = "=="|op = "!=")/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if(op.image.equals(">")){ op.image=">>"; }
    if(op.image.equals("<")){ op.image="<<"; }
    jjtn000.setName(op.image);
    return op.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


Condition Condition(): {/*@bgen(jjtree) Condition */
                        SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/String col,op,value;}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  col = leftComp() op = operator() value = rightComp()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    Condition cond = new Condition(col,op,value);
    SimpleNode node= (SimpleNode) jjtn000.jjtGetChild(2).jjtGetChild(0);
    if(node.ntType().equals("Table_Column")){
		cond.rightIsColumn();
    }
    return cond;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//AND \u9428\u52ea\u7d2d\u934f\u5822\u9a87\u7455\u4f80\u73ee\u6d5c\ufffd OR \u5bee\u66de\u53c6\u95c8\u70b5\u7c93\u7f01\u64b6\ue0c1\u93c9\u30e6\u5bda\u7039\u6c2b\u7d2d\u934f\u5822\u9a87
void Conditions(): {/*@bgen(jjtree) Conditions */
                    SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONS);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Object cond = null;}
{/*@bgen(jjtree) Conditions */
        try {
/*@egen*/
 	cond = E()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
 	{
 	  jjtn000.setConditions(cond);
 	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Object E(): {/*@bgen(jjtree) E */
             SimpleNode jjtn000 = new SimpleNode(JJTE);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Object cond1=null,cond2=null; }
{/*@bgen(jjtree) E */
   try {
/*@egen*/
   cond1= T()  cond2= _E()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    CSet cond = new CSet(CSet.OR);
    combineConditions(cond,cond1,cond2);
    return cond;
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Object _E(): {/*@bgen(jjtree) _E */
               SimpleNode jjtn000 = new SimpleNode(JJT_E);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/ Object cond1=null,cond2=null;}
{/*@bgen(jjtree) _E */
  try {
/*@egen*/
  [< OR > cond1 = T() cond2= _E()]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    CSet cond = new CSet(CSet.OR);
   combineConditions(cond,cond1,cond2);
    return cond;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Object T(): {/*@bgen(jjtree) T */
             SimpleNode jjtn000 = new SimpleNode(JJTT);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Object cond1=null,cond2=null;}
{/*@bgen(jjtree) T */
  try {
/*@egen*/
  cond1 = F() cond2 = _T()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    CSet cond = new CSet(CSet.AND);
    combineConditions(cond,cond1,cond2);
    return cond;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Object _T(): {/*@bgen(jjtree) _T */
              SimpleNode jjtn000 = new SimpleNode(JJT_T);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Object cond1=null,cond2=null; }
{/*@bgen(jjtree) _T */
  try {
/*@egen*/
  [ < AND > cond1 =F() cond2= _T()]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    CSet cond = new CSet(CSet.AND);
    combineConditions(cond,cond1,cond2);
    return cond;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Object F(): {/*@bgen(jjtree) F */
             SimpleNode jjtn000 = new SimpleNode(JJTF);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Object cond = null;}
{/*@bgen(jjtree) F */
        try {
/*@egen*/
	(cond = Condition()|"("cond = E() ")")/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return cond;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//-----\u95ab\u590b\u5ae8\u7487\ue15e\u5f5e---------------------
void Select():
{/*@bgen(jjtree) Select */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Select */
   try {
/*@egen*/
   < SELECT > Target() < FROM > Tables() [< WHERE > Conditions()]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

//-------------------Drop\u7487\ue15e\u5f5e-----------
void Drop(): {/*@bgen(jjtree) Drop */
              SimpleNode jjtn000 = new SimpleNode(JJTDROP);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Drop */
  try {
/*@egen*/
  < DROP > ( t=< KW_DATABASE >| t=< KW_TABLE >) DropTarget()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void DropTarget():{/*@bgen(jjtree) DropTarget */
                   SimpleNode jjtn000 = new SimpleNode(JJTDROPTARGET);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DropTarget */
        try {
/*@egen*/
	t=< ID >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
//--------------------Insert\u7487\ue15e\u5f5e-----------
void Insert(): {/*@bgen(jjtree) Insert */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Insert */
  try {
/*@egen*/
  < INSERT > < INTO > Table()  (< VALUES > "(" KEY_VALUE() ")"| "(" A() C() B() ")")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void A() :{/*@bgen(jjtree) A */
  SimpleNode jjtn000 = new SimpleNode(JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) A */
  try {
/*@egen*/
  [","] Column()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void C(): {/*@bgen(jjtree) C */
  SimpleNode jjtn000 = new SimpleNode(JJTC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) C */
  try {
/*@egen*/
  A() C() B() | ")" < VALUES > "("/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
void B() :{/*@bgen(jjtree) B */
  SimpleNode jjtn000 = new SimpleNode(JJTB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) B */
  try {
/*@egen*/
  [","] Value()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String String(): {/*@bgen(jjtree) String */
                  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t=< STR >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.setName(t.image);return t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String Num(): {/*@bgen(jjtree) Num */
               SimpleNode jjtn000 = new SimpleNode(JJTNUM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Num */
  try {
/*@egen*/
  t=< NUM >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ { jjtn000.setName(t.image);return t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String Bool(): {/*@bgen(jjtree) Bool */
                SimpleNode jjtn000 = new SimpleNode(JJTBOOL);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Bool */
  try {
/*@egen*/
  t=< BOOL >/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.setName(t.image);return t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Value(): {/*@bgen(jjtree) Value */
  SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Value */
  try {
/*@egen*/
  String()|Num()|Bool()|Column()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void KEY_VALUE(): {/*@bgen(jjtree) KEY_VALUE */
  SimpleNode jjtn000 = new SimpleNode(JJTKEY_VALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) KEY_VALUE */
  try {
/*@egen*/
  Column() Value() ["," KEY_VALUE()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//---------------------Delete\u7487\ue15e\u5f5e----------
void Delete(): {/*@bgen(jjtree) Delete */
  SimpleNode jjtn000 = new SimpleNode(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Delete */
  try {
/*@egen*/
  < DELETE > <FROM > Table() DeleteFollow()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void DeleteFollow():{/*@bgen(jjtree) DeleteFollow */
  SimpleNode jjtn000 = new SimpleNode(JJTDELETEFOLLOW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeleteFollow */
  try {
/*@egen*/
  [< WHERE > Conditions()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
//-----------------------Update\u7487\ue15e\u5f5e---------
void Update():{/*@bgen(jjtree) Update */
  SimpleNode jjtn000 = new SimpleNode(JJTUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Update */
        try {
/*@egen*/
	< UPDATE > Table() < SET > KEY_VALUE() [< WHERE > Conditions()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
